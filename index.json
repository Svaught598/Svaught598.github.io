[{"authors":["admin"],"categories":null,"content":"Steven Vaught is a recent MSc Physics graduate with a passion for software developement. His voyage into programming started with scripting simple data-oriented tasks related to Polymer Physics, and has exploded into a an intense excitement for all things computing related. He spends most of his time reading about or using new technologies in personal projects.\n","date":-62135596800,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":-62135596800,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/steven-vaught/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/steven-vaught/","section":"authors","summary":"Steven Vaught is a recent MSc Physics graduate with a passion for software developement. His voyage into programming started with scripting simple data-oriented tasks related to Polymer Physics, and has exploded into a an intense excitement for all things computing related.","tags":null,"title":"Steven Vaught","type":"authors"},{"authors":[],"categories":[],"content":"About The Project Since I found out about system emulation, I have been super fascinated with it. I\u0026rsquo;m building this CHIP-8 emulator (interpreter\u0026hellip;?) to get started since the EmuDev community tends to suggest it for first-timers. So what is the CHIP-8? The CHIP-8 is an abstract machine (not unlike the JVM) that was first used to play games on the COSMAC VIP in the 1970s. I thought while considering this project, \u0026ldquo;Why not implement an abstract virtual machine by using the implementation of a different abstract virtual machine?\u0026rdquo;, and thus, this project came to be!\nI haven\u0026rsquo;t used Java extensively, and this project hardly made me an expert, but I have become much more familiar the language as a result of undertaking this project. There were some pretty complex parts to making this emulator, the most challenging of which had to do with the Event dispatch thread and the opcode 0xFX0A. Anyone familiar enough with the CHIP-8 to recognize opcodes probably sees where this is going: any time the CPU interpreted 0xFX0A, it paused the thread, which meant that input couldn\u0026rsquo;t be read.\nOpcode 0xFX0A is pretty simple. It tells the CPU \u0026ldquo;hey, why don\u0026rsquo;t you sleep() until a key is pressed?\u0026rdquo;. This becomes a problem in a single threaded application since continuous calls of sleep() end up blocking IO, so the program is never able to tell when a key is pressed. So in plainspeak, an infitite loop. I ended up fixing the issue by dispatching UI/IO events on the Event Dispatch Thread provided by swing, while running other logic on a separate thread. This was a pretty nice solution, but I do wish I would\u0026rsquo;ve spent more time planning the implementation before jumping right into the code.\nFeatures Here is the feature list!\n Thorough Debug UI (panels to monitor registers, stack, timers, program counter, etc\u0026hellip;) Variable CPU clock speed Pause/Resume/Reset Emulation Load ROMs from file  ","date":1596153600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596153600,"objectID":"4136e110b07137c87f995d49ad84d0c1","permalink":"/project/chip8/","publishdate":"2020-07-31T00:00:00Z","relpermalink":"/project/chip8/","section":"project","summary":"Implementation of the CHIP-8 Virtual Machine using Java/Swing","tags":[],"title":"CHIP-8 Emulator","type":"project"},{"authors":[],"categories":[],"content":"About The Project This was one of the projects I did during my Computational Physics course at Texas A\u0026amp;M University-Commerce. The Physics was a ton of fun; learning the syntax for gnuplot wasn\u0026rsquo;t. Here\u0026rsquo;s a quick example for the terribly unintuitive syntax (and yes, the repeated colons are necessary):\nplot infile using 2:xtic(1) every :::1::1 t \u0026quot;Healthy\u0026quot; lc rgb \u0026quot;blue\u0026quot;, \\ '' using 3 every :::1::1 t \u0026quot;Infected\u0026quot; lc rgb \u0026quot;dark-green\u0026quot;, \\ '' using 4 every :::1::1 t \u0026quot;Recovered\u0026quot; lc rgb \u0026quot;dark-yellow\u0026quot;  Problems I Faced Honestly, the bulk of the problems I had with this project revolved around using this plotting software. The learning curve is comparable to the base of a cliff; it was impossibly complex at first and all at once became straightforward and simple. I actually prefer gnuplot over the more popular matplotlib after this project since the software is so flexible with plotting data. I seriously recommend gnuplot to anyone in the scientific community as it made a lot of things normally complex in python very simple.\nI did have one minor problem: 10 seconds of simulation took 10 minutes to prepare. This really wasn\u0026rsquo;t a huge issue, but I liked having instant feeback when I made changes to the project, so I took a profiler to my code and found that the biggest bottleneck was with IO. Apparently opening and closing files takes a lot of time. News to me. I circumvented this by storing all the data in one file, using \\n as a delimeter to differentiate between clusters of particles at different timesteps, but alas, the program still took 8 minutes to prepare 10 seconds!\nThe profiler wasn\u0026rsquo;t able to find any more glaring issues with my code, but I realized that plotting any constiuent timestep was an orthogonal task to all others. This meant that I could call all plot(timestep) in parallel with each other and not worry about complicated stuff like race conditions. Implementing it was super easy, but it also meant that I had to start storing data for timesteps in separate files to keep things thread safe (probably didn\u0026rsquo;t have to, but I didn\u0026rsquo;t know gnuplot well enough to come up with a better solution). I made the changes, and got a speed increase of X10! Now, rendering 10 seconds of simulation was just short of a minute!\n","date":1587168000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587168000,"objectID":"c790189beb0e0f5df57df264e4106a28","permalink":"/project/infection/","publishdate":"2020-04-18T00:00:00Z","relpermalink":"/project/infection/","section":"project","summary":"Simulation using molecular dynamics to model disease spread.","tags":[],"title":"Infection Simulation","type":"project"},{"authors":null,"categories":null,"content":"","date":1461715200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1461715200,"objectID":"b263396538ca48d8440317645aa61e72","permalink":"/project/wetlab/","publishdate":"2016-04-27T00:00:00Z","relpermalink":"/project/wetlab/","section":"project","summary":"Application that performs calculations using material information stored in an SQLite database","tags":null,"title":"WetLabApp","type":"project"}]